[gd_scene load_steps=20 format=2]

[ext_resource path="res://menu.gd" type="Script" id=1]
[ext_resource path="res://Assets/buttons/button1.png" type="Texture" id=2]
[ext_resource path="res://Assets/buttons/button_hover.png" type="Texture" id=3]
[ext_resource path="res://Assets/buttons/button_clicked.png" type="Texture" id=4]
[ext_resource path="res://Assets/Pixellari.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://Assets/background_2.png" type="Texture" id=6]

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(0.38,0.57,1.0,1.0);
uniform float zoom = 10.0;

/* skew constants for 3d simplex functions */
const float F3 =  0.3999;
const float G3 =  0.1666667;

vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

/* 3d simplex noise */
float simplex3d(vec3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
	 
	 /* calculate s and x */
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 /* calculate i1 and i2 */
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 /* x1, x2, x3 */
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 /* 2. find four surflets and store them in d */
	 vec4 w, d;
	 
	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 /* 3. return the sum of the four surflets */
	 return dot(d, vec4(52.0));
}

float noise(vec3 m) {
    return   0.5333333*simplex3d(m)
			+0.2666667*simplex3d(2.0*m)
			+0.1333333*simplex3d(4.0*m)
			+0.0666667*simplex3d(8.0*m);
}

float lightning(vec2 _st,float _zoom,float intensity){ 
	_st.y *= _zoom;
    _st = fract(_st);
	_st = _st * 2. -1.;   
	                        
	float t = clamp((_st.x * -_st.x * 0.16) + 0.15, 0., 1.);                         
	float y = abs(intensity * -t + _st.y);

	float g = pow(y, 0.2);
	                    
	return g;
}

void fragment()
{
	vec2 p = UV/(1.0 / TEXTURE_PIXEL_SIZE).x;
	vec3 p3 = vec3(p, TIME*0.4);   
	float intensity = noise(vec3(p3 * 12.0 + 12.0));
	                    
	float row = lightning(UV,zoom,intensity);
	float col = lightning(UV.yx,zoom,intensity);
	
	COLOR.rgb = color.rgb * (2.0 - row - col);                         
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/color = Color( 0.0823529, 0.568627, 0.054902, 1 )
shader_param/zoom = 2.0

[sub_resource type="DynamicFont" id=14]
size = 20
font_data = ExtResource( 5 )

[sub_resource type="StyleBoxTexture" id=1]
texture = ExtResource( 3 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="StyleBoxTexture" id=2]
texture = ExtResource( 4 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="StyleBoxTexture" id=3]
texture = ExtResource( 2 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="DynamicFont" id=19]
size = 20
font_data = ExtResource( 5 )

[sub_resource type="StyleBoxTexture" id=4]
texture = ExtResource( 3 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="StyleBoxTexture" id=5]
texture = ExtResource( 4 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="StyleBoxTexture" id=6]
texture = ExtResource( 2 )
region_rect = Rect2( 0, 0, 128, 32 )

[sub_resource type="DynamicFont" id=13]
size = 80
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 5 )

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;

// --- Includes --- //
//#include \"res://shaders/includes/generic_functions.gdshaderinc\"

// --- Uniforms --- //
uniform vec4 shine_color: hint_color = vec4(1.0, 1.0, 1.0, 0.25);

uniform float line_width: hint_range(0.0, 2.0, 0.01) = 0.1;
uniform float angle: hint_range(0.0, 6.28318530718, 0.1308996939) = 0.785398163397;

uniform float speed: hint_range(0.0, 10.0, 0.1) = 1.0;
uniform float wait_cycles: hint_range(0.0, 10.0, 0.1) = 1.0;

// --- Functions --- //
vec2 rotate_precalculated(vec2 _pos, float _sine, float _cosine) {
	return vec2(_pos.x * _cosine + _pos.y * -_sine, _pos.x * _sine + _pos.y * _cosine);
}

void fragment() {
	float sine = sin(angle);
	float cosine = cos(angle);
	float len = 1.5 - max(abs(sine), abs(cosine)) + line_width;
	float line = smoothstep(-line_width, line_width, 
			rotate_precalculated((UV - vec2(0.5)), sine, cosine).y - mod(TIME * speed, (len * 2.0) * wait_cycles) + len);
	COLOR.rgb += shine_color.rgb * shine_color.a * vec3(line * (1.0 - line) * 4.0);
}
"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/shine_color = Color( 0, 1, 0.0156863, 1 )
shader_param/line_width = 0.1
shader_param/angle = 0.7854
shader_param/speed = 1.0
shader_param/wait_cycles = 1.0

[node name="menu" type="Node2D"]
script = ExtResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="BlackLines" type="Node" parent="CanvasLayer"]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer/BlackLines"]
material = SubResource( 16 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.027451, 0.458824, 0.027451, 1 )

[node name="Background2" type="Sprite" parent="CanvasLayer/BlackLines"]
position = Vector2( 514.5, 290 )
scale = Vector2( 1.029, 1.029 )
texture = ExtResource( 6 )

[node name="Start_Game" type="Button" parent="CanvasLayer"]
margin_left = 151.0
margin_top = 217.0
margin_right = 391.0
margin_bottom = 257.0
custom_fonts/font = SubResource( 14 )
custom_styles/hover = SubResource( 1 )
custom_styles/pressed = SubResource( 2 )
custom_styles/normal = SubResource( 3 )
text = "CLIQUE PRA COMEÃ‡AR"

[node name="Load_Game" type="Button" parent="CanvasLayer"]
margin_left = 668.0
margin_top = 220.0
margin_right = 908.0
margin_bottom = 260.0
custom_fonts/font = SubResource( 19 )
custom_styles/hover = SubResource( 4 )
custom_styles/pressed = SubResource( 5 )
custom_styles/normal = SubResource( 6 )
text = "CLIQUE PRA CARREGAR"

[node name="Label2" type="Label" parent="CanvasLayer"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -198.0
margin_top = 10.0
margin_right = 242.0
margin_bottom = 90.0
custom_fonts/font = SubResource( 13 )
text = "ShapeStylist"

[node name="Label" type="Label" parent="CanvasLayer"]
modulate = Color( 1, 1, 1, 0.317647 )
material = SubResource( 18 )
anchor_left = 0.5
anchor_right = 0.5
margin_left = -198.0
margin_top = 10.0
margin_right = 242.0
margin_bottom = 90.0
custom_fonts/font = SubResource( 13 )
text = "ShapeStylist"

[connection signal="pressed" from="CanvasLayer/Start_Game" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="CanvasLayer/Load_Game" to="." method="_on_Load_Game_pressed"]
